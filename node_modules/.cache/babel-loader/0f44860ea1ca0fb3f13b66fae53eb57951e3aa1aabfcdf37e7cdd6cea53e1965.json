{"ast":null,"code":"export const products = {\n  'bottle-pet': {\n    name: 'Bouteille en PET',\n    image: 'https://via.placeholder.com/150',\n    score: 3,\n    impactDetails: [{\n      label: 'Type de plastique',\n      value: 'PET'\n    }, {\n      label: 'Recyclabilité',\n      value: 'Moyenne'\n    }, {\n      label: 'Temps de décomposition',\n      value: '450 ans'\n    }, {\n      label: 'Impact CO2',\n      value: 'Élevé'\n    }],\n    alternatives: [{\n      name: 'Gourde en inox',\n      image: 'https://via.placeholder.com/150',\n      score: 9,\n      description: 'Réutilisable à vie, recyclable à 100%'\n    }, {\n      name: 'Bouteille en verre',\n      image: 'https://via.placeholder.com/150',\n      score: 8,\n      description: 'Recyclable à l\\'infini'\n    }]\n  },\n  'plastic-bag': {\n    name: 'Sac en plastique',\n    image: 'https://via.placeholder.com/150',\n    score: 2,\n    impactDetails: [{\n      label: 'Type de plastique',\n      value: 'PE'\n    }, {\n      label: 'Recyclabilité',\n      value: 'Faible'\n    }, {\n      label: 'Temps de décomposition',\n      value: '400 ans'\n    }, {\n      label: 'Impact CO2',\n      value: 'Élevé'\n    }],\n    alternatives: [{\n      name: 'Sac en tissu',\n      image: 'https://via.placeholder.com/150',\n      score: 9,\n      description: 'Réutilisable des centaines de fois'\n    }, {\n      name: 'Panier en osier',\n      image: 'https://via.placeholder.com/150',\n      score: 10,\n      description: '100% naturel et biodégradable'\n    }]\n  },\n  'plastic-container': {\n    name: 'Contenant alimentaire',\n    image: 'https://via.placeholder.com/150',\n    score: 4,\n    impactDetails: [{\n      label: 'Type de plastique',\n      value: 'PP'\n    }, {\n      label: 'Recyclabilité',\n      value: 'Bonne'\n    }, {\n      label: 'Temps de décomposition',\n      value: '500 ans'\n    }, {\n      label: 'Impact CO2',\n      value: 'Moyen'\n    }],\n    alternatives: [{\n      name: 'Contenant en verre',\n      image: 'https://via.placeholder.com/150',\n      score: 9,\n      description: 'Réutilisable et recyclable'\n    }, {\n      name: 'Boîte en inox',\n      image: 'https://via.placeholder.com/150',\n      score: 10,\n      description: 'Durable et recyclable'\n    }]\n  }\n};\nexport const analyzeImage = imageData => {\n  // Simulation d'une analyse d'image avec reconnaissance de forme\n  // Dans une vraie application, on utiliserait une API de reconnaissance d'image\n  console.log('Analyse de l\\'image:', imageData.substring(0, 50) + '...'); // Utilisation de imageData pour éviter l'erreur ESLint\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Simulation de la détection d'une bouteille en PET\n      resolve('bottle-pet');\n    }, 2000);\n  });\n};","map":{"version":3,"names":["products","name","image","score","impactDetails","label","value","alternatives","description","analyzeImage","imageData","console","log","substring","Promise","resolve","setTimeout"],"sources":["/Users/cortex/Documents/Code/ecolo/src/data/products.js"],"sourcesContent":["export const products = {\n  'bottle-pet': {\n    name: 'Bouteille en PET',\n    image: 'https://via.placeholder.com/150',\n    score: 3,\n    impactDetails: [\n      { label: 'Type de plastique', value: 'PET' },\n      { label: 'Recyclabilité', value: 'Moyenne' },\n      { label: 'Temps de décomposition', value: '450 ans' },\n      { label: 'Impact CO2', value: 'Élevé' }\n    ],\n    alternatives: [\n      {\n        name: 'Gourde en inox',\n        image: 'https://via.placeholder.com/150',\n        score: 9,\n        description: 'Réutilisable à vie, recyclable à 100%'\n      },\n      {\n        name: 'Bouteille en verre',\n        image: 'https://via.placeholder.com/150',\n        score: 8,\n        description: 'Recyclable à l\\'infini'\n      }\n    ]\n  },\n  'plastic-bag': {\n    name: 'Sac en plastique',\n    image: 'https://via.placeholder.com/150',\n    score: 2,\n    impactDetails: [\n      { label: 'Type de plastique', value: 'PE' },\n      { label: 'Recyclabilité', value: 'Faible' },\n      { label: 'Temps de décomposition', value: '400 ans' },\n      { label: 'Impact CO2', value: 'Élevé' }\n    ],\n    alternatives: [\n      {\n        name: 'Sac en tissu',\n        image: 'https://via.placeholder.com/150',\n        score: 9,\n        description: 'Réutilisable des centaines de fois'\n      },\n      {\n        name: 'Panier en osier',\n        image: 'https://via.placeholder.com/150',\n        score: 10,\n        description: '100% naturel et biodégradable'\n      }\n    ]\n  },\n  'plastic-container': {\n    name: 'Contenant alimentaire',\n    image: 'https://via.placeholder.com/150',\n    score: 4,\n    impactDetails: [\n      { label: 'Type de plastique', value: 'PP' },\n      { label: 'Recyclabilité', value: 'Bonne' },\n      { label: 'Temps de décomposition', value: '500 ans' },\n      { label: 'Impact CO2', value: 'Moyen' }\n    ],\n    alternatives: [\n      {\n        name: 'Contenant en verre',\n        image: 'https://via.placeholder.com/150',\n        score: 9,\n        description: 'Réutilisable et recyclable'\n      },\n      {\n        name: 'Boîte en inox',\n        image: 'https://via.placeholder.com/150',\n        score: 10,\n        description: 'Durable et recyclable'\n      }\n    ]\n  }\n};\n\nexport const analyzeImage = (imageData) => {\n  // Simulation d'une analyse d'image avec reconnaissance de forme\n  // Dans une vraie application, on utiliserait une API de reconnaissance d'image\n  console.log('Analyse de l\\'image:', imageData.substring(0, 50) + '...'); // Utilisation de imageData pour éviter l'erreur ESLint\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      // Simulation de la détection d'une bouteille en PET\n      resolve('bottle-pet');\n    }, 2000);\n  });\n}; "],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG;EACtB,YAAY,EAAE;IACZC,IAAI,EAAE,kBAAkB;IACxBC,KAAK,EAAE,iCAAiC;IACxCC,KAAK,EAAE,CAAC;IACRC,aAAa,EAAE,CACb;MAAEC,KAAK,EAAE,mBAAmB;MAAEC,KAAK,EAAE;IAAM,CAAC,EAC5C;MAAED,KAAK,EAAE,eAAe;MAAEC,KAAK,EAAE;IAAU,CAAC,EAC5C;MAAED,KAAK,EAAE,wBAAwB;MAAEC,KAAK,EAAE;IAAU,CAAC,EACrD;MAAED,KAAK,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAQ,CAAC,CACxC;IACDC,YAAY,EAAE,CACZ;MACEN,IAAI,EAAE,gBAAgB;MACtBC,KAAK,EAAE,iCAAiC;MACxCC,KAAK,EAAE,CAAC;MACRK,WAAW,EAAE;IACf,CAAC,EACD;MACEP,IAAI,EAAE,oBAAoB;MAC1BC,KAAK,EAAE,iCAAiC;MACxCC,KAAK,EAAE,CAAC;MACRK,WAAW,EAAE;IACf,CAAC;EAEL,CAAC;EACD,aAAa,EAAE;IACbP,IAAI,EAAE,kBAAkB;IACxBC,KAAK,EAAE,iCAAiC;IACxCC,KAAK,EAAE,CAAC;IACRC,aAAa,EAAE,CACb;MAAEC,KAAK,EAAE,mBAAmB;MAAEC,KAAK,EAAE;IAAK,CAAC,EAC3C;MAAED,KAAK,EAAE,eAAe;MAAEC,KAAK,EAAE;IAAS,CAAC,EAC3C;MAAED,KAAK,EAAE,wBAAwB;MAAEC,KAAK,EAAE;IAAU,CAAC,EACrD;MAAED,KAAK,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAQ,CAAC,CACxC;IACDC,YAAY,EAAE,CACZ;MACEN,IAAI,EAAE,cAAc;MACpBC,KAAK,EAAE,iCAAiC;MACxCC,KAAK,EAAE,CAAC;MACRK,WAAW,EAAE;IACf,CAAC,EACD;MACEP,IAAI,EAAE,iBAAiB;MACvBC,KAAK,EAAE,iCAAiC;MACxCC,KAAK,EAAE,EAAE;MACTK,WAAW,EAAE;IACf,CAAC;EAEL,CAAC;EACD,mBAAmB,EAAE;IACnBP,IAAI,EAAE,uBAAuB;IAC7BC,KAAK,EAAE,iCAAiC;IACxCC,KAAK,EAAE,CAAC;IACRC,aAAa,EAAE,CACb;MAAEC,KAAK,EAAE,mBAAmB;MAAEC,KAAK,EAAE;IAAK,CAAC,EAC3C;MAAED,KAAK,EAAE,eAAe;MAAEC,KAAK,EAAE;IAAQ,CAAC,EAC1C;MAAED,KAAK,EAAE,wBAAwB;MAAEC,KAAK,EAAE;IAAU,CAAC,EACrD;MAAED,KAAK,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAQ,CAAC,CACxC;IACDC,YAAY,EAAE,CACZ;MACEN,IAAI,EAAE,oBAAoB;MAC1BC,KAAK,EAAE,iCAAiC;MACxCC,KAAK,EAAE,CAAC;MACRK,WAAW,EAAE;IACf,CAAC,EACD;MACEP,IAAI,EAAE,eAAe;MACrBC,KAAK,EAAE,iCAAiC;MACxCC,KAAK,EAAE,EAAE;MACTK,WAAW,EAAE;IACf,CAAC;EAEL;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,SAAS,IAAK;EACzC;EACA;EACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,SAAS,CAACG,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;EACzE,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf;MACAD,OAAO,CAAC,YAAY,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}